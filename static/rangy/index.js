// Generated by CoffeeScript 1.4.0

/*
# coffee -w -c index.coffee
*/


(function() {
  var uuid;

  uuid = function() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
        return v.toString(16);
    });;
  };

  $(function() {
    var active_cell, execute_code, page, worksheet;
    active_cell = void 0;
    $.fn.extend({
      salvus_worksheet: function(opts) {
        var worksheet;
        worksheet = void 0;
        this.each(function() {
          worksheet = $(".salvus-templates").find(".salvus-worksheet").clone();
          $(this).append(worksheet);
          return worksheet.append_salvus_cell();
        });
        return worksheet;
      },
      append_salvus_cell: function(opts) {
        var cell;
        cell = void 0;
        this.each(function() {
          var id;
          cell = $(".salvus-templates").find(".salvus-cell").clone().data("worksheet", $(this));
          id = uuid();
          cell.attr('id', id);
          cell.find(".salvus-cell-input").data("cell", cell).click(function(e) {
            return active_cell = $(this).data('cell');
          }).focus(function(e) {
            return active_cell = $(this).data('cell');
          });
          $(this).append(cell);
          active_cell = cell;
          return cell.find(".salvus-cell-input").focus();
        });
        return cell;
      }
    });
    $(document).keydown(function(e) {
      if (e.which === 13 && !e.shiftKey) {
        return execute_code();
      }
    });
    execute_code = function() {
      var cell, e, input, input_text, next, output, output_text;
      e = $(document.activeElement);
      if (!e.hasClass('salvus-cell-input')) {
        return true;
      }
      cell = active_cell;
      if (!(cell != null)) {
        return;
      }
      if (typeof console !== "undefined" && console !== null) {
        console.log('execute_code!', cell);
      }
      input = cell.find(".salvus-cell-input");
      input_text = input.text();
      if (typeof console !== "undefined" && console !== null) {
        console.log(input_text);
      }
      output = cell.find(".salvus-cell-output");
      output_text = eval(input_text);
      output.text(output_text);
      next = cell.next();
      if (next.length === 0) {
        next = worksheet.append_salvus_cell();
      }
      next.find(".salvus-cell-input").focus();
      active_cell = next;
      return false;
    };
    page = $("#page");
    worksheet = page.salvus_worksheet();
    return typeof console !== "undefined" && console !== null ? console.log(worksheet) : void 0;
  });

}).call(this);
